
/////////////////////////////////////////////////////////////////////////////
// CKeyboardLayoutDlg dialog


CKeyboardLayoutDlg::CKeyboardLayoutDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CKeyboardLayoutDlg::IDD, pParent)
{
	//{{AFX_DATA_INIT(CKeyboardLayoutDlg)
	//}}AFX_DATA_INIT
}


void CKeyboardLayoutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CKeyboardLayoutDlg)
	DDX_Control(pDX, IDC_CONTROL, m_control);
	DDX_Control(pDX, IDC_SHIFT, m_shift);
	DDX_Control(pDX, IDC_LIST1, m_list1);
	//}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CKeyboardLayoutDlg, CDialog)
	//{{AFX_MSG_MAP(CKeyboardLayoutDlg)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CKeyboardLayoutDlg message handlers

struct TKLItem
{
	char *name;
	WORD key;
};

#define KL_SHIFT	0x8000
#define KL_CONTROL	0x4000

TKLItem klitem[]=
{
	{ "Play song",				VK_F2 },
	{ "Continue",				VK_F3 },
	{ "Play actual tracks",		VK_F4 },
	{ "Stop",					VK_ESCAPE },
	{ "Track edit mode",		VK_F5 },
	{ "Instrument edit mode",	VK_F6 },
	{ "Info edit mode",			VK_F7 },
	{ "Song edit mode",			VK_F8 },
	{ "Prove mode",				VK_F9 },
	{ "Respect volume mode on/off", VK_F11 },
	{ "Track/Instrument edit mode", VK_F12 },
	{ "Move left to previous track", VK_DIVIDE },
	{ "Move right to following track", VK_MULTIPLY },
	{ "Decrease volume",		VK_SUBTRACT },
	{ "Increase volume",		VK_ADD },
	{ "", 0 }
};


BOOL CKeyboardLayoutDlg::OnInitDialog() 
{
	CDialog::OnInitDialog();
	
	// TODO: Add extra initialization here
	// add the columns to the list control
	char* columnTxt[] = {"Function","Default hotkey","Hotkey"};
	int columnCx[] = {200,100,80};
	for (int i = 0; i < 3; i++)
	{
		LV_COLUMN lvColumn;
		lvColumn.mask = LVCF_FMT | LVCF_SUBITEM | LVCF_TEXT | LVCF_WIDTH;
		lvColumn.fmt = LVCFMT_LEFT;		//: LVCFMT_RIGHT;
		lvColumn.pszText = columnTxt[i];
		lvColumn.iSubItem = i;
		lvColumn.cx = columnCx[i];
		m_list1.InsertColumn(i, &lvColumn);
	}
	m_list1.SetExtendedStyle(LVS_EX_FULLROWSELECT);
	m_list1.DeleteAllItems();

	WORD key=0;
	CString s;
	for(i=0; key=klitem[i].key; i++)
	{
		m_list1.InsertItem(i,"",0);
		m_list1.SetItemText(i,0,klitem[i].name);
		s.Format("%04X",key);
		m_list1.SetItemText(i,1,s);
	}

	return TRUE;  // return TRUE unless you set the focus to a control
	              // EXCEPTION: OCX Property Pages should return FALSE
}

//-----------------------------------------------------------------------------



/////////////////////////////////////////////////////////////////////////////
// CKeyboardLayoutDlg dialog

class CKeyboardLayoutDlg : public CDialog
{
// Construction
public:
	CKeyboardLayoutDlg(CWnd* pParent = NULL);   // standard constructor

// Dialog Data
	//{{AFX_DATA(CKeyboardLayoutDlg)
	enum { IDD = IDD_KEYBOARDLAYOUT };
	CButton	m_control;
	CButton	m_shift;
	CListCtrl	m_list1;
	//}}AFX_DATA


// Overrides
	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CKeyboardLayoutDlg)
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
	//}}AFX_VIRTUAL

// Implementation
protected:

	// Generated message map functions
	//{{AFX_MSG(CKeyboardLayoutDlg)
	virtual BOOL OnInitDialog();
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()
};
//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_CONFIGDLG_H__71CF2041_5206_11D7_BEB0_00600854AFCA__INCLUDED_)
